import axios from "axios";
import { SiGithubactions } from "react-icons/si";
import Model from "../../components/Module";

import { useContext, useEffect, useState } from "react";

import Spinner from "~/components/Spinner";
import Actions from "~/components/admin/actions";
import { AdminDataContext, status2global_check } from "~/context/adminContext";
import Head from "next/head";
import { getConfig, headerType, useAdminData } from "~/hooks/admin/helper";
import TableData from "~/components/admin/Table";
import Config from "~/components/admin/config";

export async function getServerSideProps(context: any) {
  const { params } = context;
  if (params.password == "123") {
    const orders = await axios(
      "https://script.google.com/macros/s/AKfycbyfBt4Ueq6GAULew28xiJrl7T-dIfNDkNm1VZmAzLiD1MySjnTkP5icgtCARxNZ_wN4/exec?type=orders",
      { withCredentials: false }
    ).then((res) => res.data);
    const config = await getConfig();
    return {
      props: {
        data: {
          orders: orders,
          config: { headers: config.status ? config.data.headersConfig : null },
        },
      },
    };
  }
}

export const AdminData = ({ data }: { data: any }) => {
  const [produceModule, togleProduceModule] = useState(false);
  const {
    viewType,
    setViewType,
    setGlobalChecking,
    setStatusCounter,
    statusCounter,
    globalChecking,
    renderdScreen,
  } = useContext(AdminDataContext);
  const [loading, setLoading] = useState(false);
  const { headers, ordersData, setOrdersData } = useAdminData(data, loading);

  const handleClick = (e: any, lineID: any, type: string, from?: string) => {
    if (from && from == "row")
      setOrdersData((prev) => {
        let prevStatus: any;
        const newArray = prev?.map((line) => {
          if (line.rowID == lineID) {
            prevStatus = line.status ?? null;
            return { ...line, status: type };
          }
          return line;
        });
        if (prevStatus)
          setStatusCounter &&
            setStatusCounter((prev) => ({
              ...prev,
              [type]: prev[type as keyof typeof prev] + 1,
              [prevStatus]: prev[prevStatus as keyof typeof prev] - 1,
            }));
        return newArray;
      });
  };

  useEffect(() => {
    Object.keys(statusCounter).map((header) => {
      const key = status2global_check[
        header as keyof typeof status2global_check
      ] as keyof typeof globalChecking;
      if (
        statusCounter[header as keyof typeof statusCounter] ==
          statusCounter.global &&
        globalChecking[key] == false
      )
        setGlobalChecking &&
          setGlobalChecking((prev) => ({ ...prev, [key]: true }));
      if (
        statusCounter[header as keyof typeof statusCounter] <
          statusCounter.global &&
        globalChecking[key] == true
      )
        setGlobalChecking &&
          setGlobalChecking((prev) => ({ ...prev, [key]: false }));
    });
    console.log({ statusCounter });
  }, [statusCounter]);

  useEffect(() => {
    // }
    if (ordersData && statusCounter.global == 0)
      setStatusCounter &&
        setStatusCounter((prev) => ({
          ...prev,
          global: ordersData.length,
          ללא: ordersData.length,
        }));
    // console.log({ ordersData });
  }, [ordersData]);
  return (
    <div className={" flex h-screen flex-col items-center justify-center"}>
      <Head>
        <title>גת אביגדור UI</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {loading ? (
          <Spinner />
        ) : renderdScreen == "admin" ? (
          setViewType && (
            <div className="h-full">
              <div className="sticky top-2 mb-8 flex flex-row-reverse justify-center gap-6">
                <Actions />
                <h1 className="flex text-sm font-extrabold tracking-tight text-white ">
                  Bizi
                  <span className="text-[hsl(280,100%,70%)]">row</span>{" "}
                  <span>
                    {" "}
                    <SiGithubactions />
                  </span>
                </h1>

                <div className="flex gap-1">
                  <button
                    onClick={() => setViewType("במטריצה")}
                    className="text-bold w-20 bg-green-400 text-black"
                  >
                    במטריצה
                  </button>
                  <button
                    onClick={() => setViewType("למחוק")}
                    className="w-20 bg-red-400"
                  >
                    {" "}
                    למחוק
                  </button>
                  <button
                    onClick={() => setViewType("ללא")}
                    className="text-bold w-20 bg-blue-300 text-black"
                  >
                    {" "}
                    לא מויינו
                  </button>
                  <button
                    onClick={() => setViewType("הכל")}
                    className="text-bold w-20 bg-gray-200 text-black"
                  >
                    {" "}
                    הכל
                  </button>
                </div>
                <button
                  onClick={() => {
                    togleProduceModule(true);
                  }}
                  className="flex w-20 justify-center bg-pink-300 text-center text-black hover:bg-red-500 hover:text-white"
                >
                  הפק
                </button>
              </div>
              <button
                className={
                  "mb-2 flex w-1/12  justify-center bg-blue-300 text-[10px] font-bold text-gray-700 hover:bg-white hover:text-black"
                }
                onClick={() => {
                  setGlobalChecking &&
                    setGlobalChecking((prev) => ({
                      ...prev,
                      reset: !globalChecking.reset,
                    }));
                  setOrdersData((prev) =>
                    prev?.map((p) => ({
                      ...p,
                      status: "ללא",
                    }))
                  );
                }}
              >
                אפס
              </button>

              {headers && (
                <div className="mb-2 flex h-1/4 w-full flex-row-reverse items-center bg-gray-800 p-2 text-center text-5xl  text-white shadow-2xl ">
                  {headers.map((cell: headerType, index: number) => {
                    if (cell.toShow)
                      return (
                        <p
                          key={JSON.stringify(cell)}
                          className="w-1/3  text-center text-[8px]"
                        >
                          {cell.replacmentName ?? cell.initialName}
                        </p>
                      );
                  })}
                  <div className="text center flex w-1/3 justify-between  bg-green-400 text-[8px] font-bold text-black">
                    <input
                      onChange={(e) => {
                        const action = e.target.checked;

                        setGlobalChecking &&
                          setGlobalChecking((prev) => ({
                            ...prev,
                            matrix: !globalChecking.matrix,
                          }));
                        setOrdersData((prev) =>
                          prev?.map((p) => ({
                            ...p,
                            status: action ? "במטריצה" : "ללא",
                          }))
                        );
                      }}
                      checked={globalChecking.matrix}
                      type="checkbox"
                    />
                    <button className="mr-1">למטריצה</button>
                  </div>
                  <div className="flex w-1/3 justify-between  bg-red-400 text-[8px] font-bold text-white">
                    <input
                      onChange={(e) => {
                        const action = e.target.checked;
                        setGlobalChecking &&
                          setGlobalChecking((prev) => ({
                            ...prev,
                            delete: !globalChecking.delete,
                          }));
                        setOrdersData((prev) =>
                          prev?.map((p) => ({
                            ...p,
                            status: action ? "למחוק" : "ללא",
                          }))
                        );
                      }}
                      checked={globalChecking.delete}
                      type="checkbox"
                    />
                    <button className="mr-1">למחוק</button>
                  </div>
                </div>
              )}
              {headers && (
                <TableData
                  data={ordersData}
                  handleClick={handleClick}
                  type={viewType}
                />
              )}

              {produceModule && (
                <Model
                  toggleModule={togleProduceModule}
                  data={ordersData}
                  setLoading={setLoading}
                />
              )}
            </div>
          )
        ) : (
          renderdScreen != "admin" && <Config />
        )}
      </main>
    </div>
  );
};

export default AdminData;
